library(shiny)
library(shinyjs)
library(V8)





jscode <- "
shinyjs.init = function() {

console.log('asdfasdfasdf');

var config = {
    content: [{
        type: 'row',
        content:[{
            type: 'component',
            componentName: 'testComponent',
            componentState: { label: 'A' }
        },{
            type: 'column',
            content:[{
                type: 'component',
                componentName: 'testComponent',
                componentState: { label: 'B' }
            },{
                type: 'component',
                componentName: 'testComponent',
                componentState: { label: 'C' }
            }]
        }]
    }]
};


var myLayout = new GoldenLayout( config );

myLayout.registerComponent( 'testComponent', function( container, componentState ){
    container.getElement().html( '<h2>' + componentState.label + '</h2>' );
});

myLayout.init();

}"




# Define the UI
ui <- bootstrapPage(
  
  
  
  tags$head(HTML("<script type='text/javascript' src='http://code.jquery.com/jquery-1.11.1.min.js'></script>")),
  tags$head(HTML("<script type='text/javascript' src='https://golden-layout.com/files/latest/js/goldenlayout.min.js'></script>")),
  
  tags$head(HTML(  "<link rel='stylesheet' href='https://golden-layout.com/files/latest/css/goldenlayout-base.css'>")),
  tags$head(HTML(  "<link rel='stylesheet' href='https://golden-layout.com/files/latest/css/goldenlayout-dark-theme.css'>")),
  

  useShinyjs(),
  extendShinyjs(text = jscode)

)


# Define the server code
server <- function(input, output) {
  


}

# Return a Shiny app object
shinyApp(ui = ui, server = server)
